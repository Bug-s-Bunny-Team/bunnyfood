AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  bunnyfood

  SAM Template for bunnyfood

Parameters:
  RegionName:
    Type: String
    Default: 'eu-central-1'
#  ApiStageName:
#    Type: String
#    Default: 'dev'
  ApiId:
    Type: String
    Default: '43uvev6qfk'

Globals:
  Function:
    Timeout: 60
    Runtime: python3.9
    Handler: function.app.lambda_handler
    Architectures:
      - x86_64
    Layers:
      - !Ref CommonLayer
      - !Ref DbLayer
    Environment:
      Variables:
        ENV: 'prod'
        BUCKET_NAME: 'bunnyfood-backend'
        REGION_NAME: !Ref RegionName
        DB_USER: 'user'
        DB_PASSWORD: 'password'
        DB_HOST: 'db'
        DB_NAME: 'bunnyfood_dev'

Resources:
  #############################################################
  # CloudFront

  #  Api:
  #    Type: AWS::Serverless::Api
  #    Properties:
  #      StageName: !Ref ApiStageName
  #      EndpointConfiguration:
  #        Type: REGIONAL

#  CloudFrontDistribution:
#    Type: AWS::CloudFront::Distribution
#    Properties:
#      DistributionConfig:
#        DefaultRootObject: index.html
#        Enabled: true
#        HttpVersion: http2
#        Origins:
#          - Id: S3Origin
#            DomainName: !GetAtt FrontendBucket.RegionalDomainName
#            S3OriginConfig:
#              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
#          - Id: ApiOrigin
#            DomainName: !Sub '${ApiId}.execute-api.${RegionName}.amazonaws.com'
#            CustomOriginConfig:
#              OriginProtocolPolicy: https-only
#              OriginSSLProtocols:
#                - TLSv1.2
#          - Id: S3BackendOrigin
#            DomainName: !GetAtt BackendBucket.RegionalDomainName
#            S3OriginConfig:
#              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
#        CacheBehaviors:
#          - PathPattern: 'media/*'
#            TargetOriginId: S3BackendOrigin
#            CachePolicyId: !Ref S3CachePolicy
#            ViewerProtocolPolicy: redirect-to-https
#            Compress: true
#          - PathPattern: 'api/*'
#            TargetOriginId: ApiOrigin
#            CachePolicyId: !Ref ApiCachePolicy
#            ViewerProtocolPolicy: redirect-to-https
#            Compress: true
#            AllowedMethods:
#              - GET
#              - HEAD
#              - OPTIONS
#              - PUT
#              - PATCH
#              - POST
#              - DELETE
#        DefaultCacheBehavior:
#          TargetOriginId: ApiOrigin
#          CachePolicyId: !Ref ApiCachePolicy
#          ViewerProtocolPolicy: redirect-to-https
#          Compress: true
#
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Client Origin Access Identity

#  S3CachePolicy:
#    Type: AWS::CloudFront::CachePolicy
#    Properties:
#      CachePolicyConfig:
#        Comment: Cache policy used when accessing static data from S3 Bucket
#        Name: S3CachePolicy
#        DefaultTTL: 600
#        MaxTTL: 1200
#        MinTTL: 0
#        ParametersInCacheKeyAndForwardedToOrigin:
#          CookiesConfig:
#            CookieBehavior: none
#          HeadersConfig:
#            HeaderBehavior: none
#          QueryStringsConfig:
#            QueryStringBehavior: none
#          EnableAcceptEncodingGzip: true
#
#  ApiCachePolicy:
#    Type: AWS::CloudFront::CachePolicy
#    Properties:
#      CachePolicyConfig:
#        Comment: Cache policy used when accessing API
#        Name: ApiCachePolicy
#        DefaultTTL: 0
#        MaxTTL: 0
#        MinTTL: 0
#        ParametersInCacheKeyAndForwardedToOrigin:
#          CookiesConfig:
#            CookieBehavior: none
#          HeadersConfig:
#            HeaderBehavior: whitelist
#            Headers:
#              - Host
#          QueryStringsConfig:
#            QueryStringBehavior: none
#          EnableAcceptEncodingGzip: false

  #############################################################
  # Tables

  InstaSessionsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: 'username'
        Type: 'String'
      TableName: 'bunnyfood-instagram-sessions'

  #############################################################
  # Buckets

  BackendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'bunnyfood-backend'

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'bunnyfood-frontend'

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource:
              Fn::Join: [ '', [ Fn::GetAtt: [ FrontendBucket, Arn ], '/*' ] ]
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}'

  BackendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BackendBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource:
              Fn::Join: [ '', [ Fn::GetAtt: [ BackendBucket, Arn ], '/*' ] ]
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}'

  #############################################################
  # Layers

  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    LayerName: CommonLayer
    Properties:
      ContentUri: common
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: makefile

  DbLayer:
    Type: AWS::Serverless::LayerVersion
    LayerName: DBLayer
    Properties:
      ContentUri: db
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: makefile

  #############################################################
  # Functions

  SignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/signup/

  ScoringFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/scoring/

  SortingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/sorter/
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BackendBucket
        - "arn:aws:iam::aws:policy/SecretsManagerReadWrite"
        - RekognitionDetectOnlyPolicy: { }

  ScrapingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 300  # 5 minutes
      CodeUri: functions/scraping/
      Environment:
        Variables:
          INSTA_USERNAME: 'notabbotswe'
          INSTA_SESSIONS_TABLE: !Ref InstaSessionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref InstaSessionsTable
        - S3CrudPolicy:
            BucketName: !Ref BackendBucket
        - "arn:aws:iam::aws:policy/SecretsManagerReadWrite"
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - geo:*
              Resource: 'arn:aws:geo:*:*:place-index/*'

#Outputs:
#  CloudFrontDomain:
#    Description: CloudFront domain name accessible from public
#    Value: !GetAtt CloudFrontDistribution.DomainName
#  ApiPath:
#    Description: Api path accessible through CloudFront
#    Value: !Sub '${CloudFrontDistribution.DomainName}/${ApiStageName}'